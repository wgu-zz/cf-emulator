// Generated by CoffeeScript 1.8.0

/*
  Array of step objects
 */

(function() {
  var EVENT_TYPES, buildfunction, current_question, currentquestion, drawStatusMarker, err, f, logEvent, mark_index, next, progressIndicator, q, question, questionNumber, questions, results, socket, statusMarker, _i, _len;

  q = [];

  q.push({
    html: "<h3>Getting started</h3>\n<p>cf CLI v6 installs with a simple point-and-click, and you no longer need to install Ruby on your system first \n(or ever). You can use new binaries or new native installers. See \n<a href=\"http://docs.run.pivotal.io/devguide/installcf/install-go-cli.html\">Install cf CLI Version 6</a>. \n</br></br> For this emulator, simply type cf commands without any installation! Now try <code>cf help</code>.\n</br></br>Please note this command line emulator includes subset of the cf command set. Some commands may not work.\n</p>"
  });

  q.push({
    html: "      <h3>Login and Play!</h3>\n      <p>In addition to your username and \n      password, you can provide a target API endpoint, organization, and space. If not specified on the command line, \n      the cf CLI prompts for:</br></br><li><strong>API endpoint</strong>: This is <code>api.run.pivotal.io</code>\n<li><strong>Username</strong>: Your username.</li>\n<li><strong>Password</strong>: Your password.</li>\n<li><strong>Org</strong>: The organization where you want to deploy your application.</li>\n<li><strong>Space</strong>: The space in the organization where you want to deploy your application.</li></p>\n<p>If you have only one organization and one space, you can omit them because <code>cf login</code> targets them automatically. \n</br></br>Usage:</p>\n<pre id=\"pre1\" class=\"terminal1\">\ncf login [-a API_URL] [-u USERNAME] [-p PASSWORD] [-o ORG] [-s SPACE]\n</pre></p>"
  });

  q.push({
    html: "      <h3>Get Target Info</h3>\n      <p>The <code>target</code> command in the cf CLI v6 is used to set or view the targeted org or space:</br></br>\n<li><strong>Usage</strong>:</li></p>\n<pre id=\"pre1\" class=\"terminal1\">\ncf target [-o ORG] [-s SPACE]\n</pre>"
  });

  q.push({
    html: "      <h3>Get Something Real!</h3>\n<p>The <code>push</code> command is used to deploy your app to CF platforms.</br>Try use the command to deploy and \nstart your own web application now. Don't worry if you have no current project. The emulator has prepared a simple sample.</p>\n<ul>\n<li><code>APP</code>, the name of the application to push, is the only required argument, and the only argument that has no flag. Even <code>APP</code> can be omitted when you provide the application name in a manifest.</li>\n<li>Many command line options are now one character long. For example, <code>-n</code> is now the flag for hostname or subdomain, replacing <code>--host</code>.</li>\n<li>There is no longer an interactive mode.</li>\n<li>You no longer create manifests interactively. See <a href=\"/devguide/deploy-apps/manifest.html\">Deploying with Application Manifests</a>.</li>\n<li>You no longer create services with push interactively or in a manifest. See <a href=\"#user-provided\">User-Provided Services</a> to learn about new commands for creating services.</li>\n<li>The <code>-m</code> (memory limit) option now requires a unit of measurement: <code>M</code>,<code>MB</code>,<code>G</code>, or <code>GB</code>, in upper case or lower case.</li>\n</ul>\n<p>The cf CLI v6 has expanded capabilities in the form of four new options.</p>\n<ul>\n<li><code>-t</code> (timeout) allows you to give your application more time to start, up to 180 seconds.</li>\n<li><code>--no-manifest</code> forces the cf CLI to ignore any existing manifest.</li>\n<li><code>--no-hostname</code> makes it possible to specify a route with a domain but no hostname.</li>\n<li><code>--no-route</code> is suitable for applications which process data while running in the background. These applications, sometimes called &ldquo;workers&rdquo; are bound only to services and should not have routes.</li>\n</ul>\n<p>Usage:</p>\n<pre id=\"pre1\" class=\"terminal1\">\ncf push APP [-b URL] [-c COMMAND] [-d DOMAIN] [-i NUM_INSTANCES] [-m MEMORY] /\n[-n HOST] [-p PATH] [-s STACK] [--no-hostname] [--no-route] [--no-start]\n</pre>\n<p>Optional arguments include:</p>\n<ul>\n<li><code>-b</code> &mdash; Custom buildpack URL, for example, <a href=\"https://github.com/heroku/heroku-buildpack-play.git\">https:// github.com/heroku/heroku-buildpack-play.git</a>\n																																		// or\n																																		// <a\n																																		// href=\"https://github.com/heroku/heroku-buildpack-play.git#stable\">https://github.com/heroku/heroku-buildpack-play.git#stable</a>\n																																		// to\n																																		// select\n																																		// <code>stable</code>\n																																		// branch</li>\n<li><code>-c</code> &mdash; Start command for the application.</li>\n<li><code>-d</code> &mdash; Domain, for example, example.com.</li>\n<li><code>-f</code> &mdash; replaces <code>--manifest</code></li>\n<li><code>-i</code> &mdash; Number of instances of the application to run.</li>\n<li><code>-m</code> &mdash; Memory limit, for example, 256, 1G, 1024M, and so on.</li>\n<li><code>-n</code> &mdash; Hostname, for example, <code>my-subdomain</code>.</li>\n<li><code>-p</code> &mdash; Path to application directory or archive.</li>\n<li><code>-s</code> &mdash; Stack to use.</li>\n<li><code>-t</code> &mdash; Timeout to start in seconds.</li>\n<li><code>--no-hostname</code> &mdash; Map the root domain to this application (NEW).</li>\n<li><code>--no-manifest</code> &mdash; Ignore manifests if they exist.</li>\n<li><code>--no-route</code> &mdash; Do not map a route to this application (NEW).</li>\n<li><code>--no-start</code> &mdash; Do not start the application after pushing.</li>\n</ul>\n<p class='note'><strong>Note</strong>: The `&ndash;no-route` option also removes existing routes from previous pushes of this app.</p>"
  });

  q.push({
    html: "      <h3>Awesome!</h3>\n      <p>Now that you deployed your application to CloudFoundry, use the apps to check the information and status of the\n      apps.</br></br>The <code>apps</code> command in the cf CLI v6 is used to list all apps in the target space:</br></br>\n<li><strong>Usage</strong>:</li></p>\n<pre id=\"pre1\" class=\"terminal1\">cf apps\n</pre>"
  });

  questions = [];


  /*
    Register the terminal
   */

  this.webterm = $('#terminal').terminal(interpreter, basesettings);

  EVENT_TYPES = {
    none: "none",
    start: "start",
    command: "command",
    next: "next",
    peek: "peek",
    complete: "complete"
  };


  /*
    Sending events to the server
   */

  logEvent = function(data) {
    var callback, loadUrl;
    loadUrl = "/tutorial/api/";
    callback = function(responseText) {
      return $("#ajax").html(responseText);
    };
    if (!data) {
      data = {
        type: EVENT_TYPES.none
      };
    }
    data.question = current_question;
    return $.post(loadUrl, data, callback, "html");
  };


  /*
    Event handlers
   */

  $('#buttonNext').click(function(e) {
    this.setAttribute('disabled', 'disabled');
    console.log(e);
    return next();
  });

  $('#leftside').bind('mousewheel', function(event, delta, deltaX, deltaY) {
    this.scrollTop += deltaY * -30;
    return event.preventDefault();
  });

  $('#fullSizeOpen').click(function() {
    return goFullScreen();
  });

  this.goFullScreen = function() {
    console.debug("going to fullsize mode");
    $('.togglesize').removeClass('startsize').addClass('fullsize');
    $('.hide-when-small').css({
      display: 'inherit'
    });
    $('.hide-when-full').css({
      display: 'none'
    });
    next(0);
    webterm.resize();
    return setTimeout(function() {
      return logEvent({
        type: EVENT_TYPES.start
      });
    }, 3000);
  };

  $('#fullSizeClose').click(function() {
    return leaveFullSizeMode();
  });

  this.leaveFullSizeMode = function() {
    console.debug("leaving full-size mode");
    $('.togglesize').removeClass('fullsize').addClass('startsize');
    $('.hide-when-small').css({
      display: 'none'
    });
    $('.hide-when-full').css({
      display: 'inherit'
    });
    return webterm.resize();
  };


  /*
    Navigation amongst the steps
   */

  current_question = 0;

  next = function(which) {
    var data;
    $('#marker-' + current_question).addClass("complete").removeClass("active");
    if (!which && which !== 0) {
      current_question++;
    } else {
      current_question = which;
    }
    questions[current_question]();
    results.clear();
    this.webterm.focus();
    if (!$('#commandShownText').hasClass('hidden')) {
      $('#commandShownText').addClass("hidden");
      $('#commandHiddenText').removeClass("hidden").show();
    }
    history.pushState({}, "", "#" + current_question);
    data = {
      'type': EVENT_TYPES.next
    };
    logEvent(data);
    $('#marker-' + current_question).removeClass("complete").addClass("active");
    $('#question-number').find('text').get(0).textContent = current_question;
  };

  results = {
    set: function(htmlText, intermediate) {
      if (intermediate) {
        console.debug("intermediate text received");
        $('#results').addClass('intermediate');
      }
      return window.setTimeout((function() {
        $('#resulttext').html(htmlText);
        return $('#results').fadeIn();
      }), 300);
    },
    clear: function() {
      $('#resulttext').html("");
      return $('#results').fadeOut('slow');
    }
  };


  /*
    Transform step objects into functions
   */

  buildfunction = function(q) {
    var _q;
    _q = q;
    return function() {
      console.debug("function called");
      $('#instructions').hide().fadeIn();
      $('#instructions .text').html(_q.html);
      window.immediateCallback = function(input, stop) {
        var data, doNotExecute;
        if (stop === true) {
          doNotExecute = true;
        } else {
          doNotExecute = false;
        }
        if (doNotExecute !== true) {
          console.log(input);
          data = {
            'type': EVENT_TYPES.command,
            'command': input.join(' '),
            'result': 'fail'
          };
          logEvent(data);
        }
      };
      window.intermediateResults = function(input) {
        var intermediate;
        if (_q.intermediateresults) {
          return results.set(_q.intermediateresults[input](), intermediate = true);
        }
      };
    };
  };

  statusMarker = $('#progress-marker-0');

  progressIndicator = $('#progress-indicator');

  drawStatusMarker = function(i) {
    var marker;
    if (i === 0) {
      marker = statusMarker;
    } else {
      marker = statusMarker.clone();
      marker.appendTo(progressIndicator);
    }
    marker.attr("id", "marker-" + i);
    marker.find('text').get(0).textContent = i;
    return marker.click(function() {
      return next(i);
    });
  };

  questionNumber = 0;

  for (_i = 0, _len = q.length; _i < _len; _i++) {
    question = q[_i];
    f = buildfunction(question);
    questions.push(f);
    drawStatusMarker(questionNumber);
    questionNumber++;
  }


  /*
    Initialization of program
   */

  if (window.location.hash) {
    try {
      currentquestion = window.location.hash.split('#')[1].toNumber();
      next(currentquestion);
    } catch (_error) {
      err = _error;
      questions[0]();
    }
  } else {
    questions[0]();
  }

  $('#results').hide();

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, length - suffix.length) !== -1;
  };

  mark_index = 0;

  socket = new SockJS('/socket:4443');

  this.stompClient = Stomp.over(socket);

  stompClient.connect({}, function(frame) {
    return stompClient.subscribe('/broker/out', function(output) {
      var message;
      message = JSON.parse(output.body);
      if (message === "done!") {
        return next(mark_index++);
      } else if (message.endsWith("> ")) {
        return this.webterm.insert(message);
      } else {
        return this.webterm.echo(message);
      }
    });
  });

}).call(this);
